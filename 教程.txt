1. 入门
    1. 安装
    2. 创建模板
    3. 文件夹结构
    4. typeScript
    5. 启动
2. CSS
    1. 全局样式（/app/layout.tsx、import '@/app/ui/global.css';）
    2. Tailwind
    3. css module（import styles from '@/app/ui/home.module.css';） 通过 styles 对象引用样式
    4. clsx（根据条件切换样式类名）
3. 字体和图像
    1. 添加字体（本地加载）
        1. 编辑 /app/ui/fonts.ts

            import { Inter } from 'next/font/google';
 
            export const inter = Inter({ subsets: ['latin'] });

        2. /app/layout.tsx

            import { inter } from '@/app/ui/fonts';

            <body className={`${inter.className}`}>{children}</body>
    2. 添加图像（自适应、懒加载）

        import Image from 'next/image';

        <Image
            src="/hero-desktop.png"
            width={1000}
            height={760}
            className="hidden md:block"
            alt="Screenshots of the dashboard project showing desktop version"
        />
4. 布局和页面
    1. 文件夹路由（一个文件夹是一个路由段，只有 page 文件内的内容才可公开访问。）
    2. 仪表板布局（layout.tsx，导入到此文件的任何组件都将成为布局的一部分。只有页面组件会更新，而布局不会重新渲染。添加到根布局的任何 UI 都将在应用程序的所有页面之间共享）

        export default function Layout({ children }: { children: React.ReactNode }) {
            return (
                <div className="flex h-screen flex-col md:flex-row md:overflow-hidden">
                <div className="w-full flex-none md:w-64">
                    <SideNav />
                </div>
                <div className="flex-grow p-6 md:overflow-y-auto md:p-12">{children}</div>
                </div>
            );
        }
5. 页面间导航
    1. Link组件（使用<a>标签每次页面导航都会刷新整页！自动代码分割和预期，当Link组件出现在浏览器视口中，会进行预加载）

        import Link from 'next/link';

        <Link
            key={link.name}
            href={link.href}
            className="flex h-[48px] grow items-center justify-center gap-2 rounded-md bg-gray-50 p-3 text-sm font-medium hover:bg-sky-100 hover:text-blue-600 md:flex-none md:justify-start md:p-2 md:px-3"
            >
            <LinkIcon className="w-6" />
            <p className="hidden md:block">{link.name}</p>
        </Link>

    2. usePathname（获取当前链接）

        由于 usePathname() 是一个 React hook，你需要将 nav-links.tsx 转换为客户端组件。在文件顶部添加 React 的 "use client" 指令，然后从 next/navigation 导入 usePathname() ：

        import { usePathname } from 'next/navigation';

        export default function NavLinks() {
            const pathname = usePathname();
            // ...
        }
7. 获取数据
    1. 链接数据库
    2. 请求瀑布流
    3. 并发请求（Promise.all()，时间是以最耗时的那个计算）
8. 静态和动态渲染
    1. 静态渲染（加载快、SEO、减少服务器负载）
    2. 动态渲染（实时数据）
9. 流媒体
    流式传输是一种数据传输技术，它允许您将路由分解为更小的“块”。

    Streaming 与 React 的组件模型配合得很好，因为每个组件都可以被视为一个块 。
    
    在 Next.js 中实现流式传输有两种方法：

        1. 在页面级别，使用 loading.tsx 文件（为您创建 <Suspense> ）。
        2. 在组件级别，使用 <Suspense> 实现更精细的控制。

    1. 页面流媒体

        1. 通过添加 loading.tsx 文件实现，子文件夹页面也会受影响

    2. 加载骨架

        加载骨架是 UI 的简化版本。许多网站将其用作占位符（或备用方案），以指示用户内容正在加载。您在 loading.tsx 中添加的任何 UI 都将作为静态文件的一部分嵌入，并首先发送。然后，其余动态内容将从服务器流式传输到客户端。

    路由组允许您将文件组织成逻辑组，而不会影响 URL 路径结构。当您使用括号 () 创建新文件夹时，其名称不会包含在 URL 路径中。因此， /dashboard/(overview)/page.tsx 会变成 /dashboard 。

    3. 组件流媒体

        import { Suspense } from 'react';

        <Suspense fallback={<RevenueChartSkeleton />}>
          <RevenueChart />
        </Suspense>

        RevenueChartSkeleton 为加载骨架，在数据未加载完成前显示。

    4. 分组组件

        创建一个新的 tsx 文件，将需要同时加载的组件放到该组件里面。（容器组件）

        当你希望多个组件同时加载时，可以使用此模式。
10. 部分预渲染

    部分预渲染是 Next.js 14 中引入的一项实验性功能。随着该功能稳定性的提升，本页面内容可能会更新。部分预渲染 (PPR) 仅在 Next.js 金丝雀版本 ( next@canary ) 中可用，而非 Next.js 稳定版。我们目前不建议在生产环境中使用部分预渲染。

    与之相对的是静态渲染和动态渲染。

    1. 启用 PPR，编辑 next.config.ts

        import type { NextConfig } from 'next';
    
        const nextConfig: NextConfig = {
            experimental: {
                ppr: 'incremental'
            }
        };
        
        export default nextConfig;

    2. 仪表板布局（layout.tsx）中配置 experimental_ppr

        export const experimental_ppr = true;

    部分预渲染的优点在于，您无需更改代码即可使用它。只要您使用 Suspense 包装路由的动态部分，Next.js 就会知道路由的哪些部分是静态的，哪些是动态的。
11. 搜索和分页

    通过 url 保存状态。

    useSearchParams：允许您访问当前 URL 的参数。例如，此 URL /dashboard/invoices?page=1&query=pending 的搜索参数将如下所示： {page: '1', query: 'pending'} 。
    usePathname：允许您读取当前 URL 的路径名。例如，对于路由 /dashboard/invoices ， usePathname 将返回 '/dashboard/invoices' 。
    useRouter：以编程方式启用客户端组件内路由之间的导航。

    何时使用 useSearchParams() 钩子与 searchParams 属性？

        一般来说，如果您想从客户端读取参数，请使用 useSearchParams() 钩子，因为这样可以避免返回服务器。

    https://nextjs.org/learn/dashboard-app/adding-search-and-pagination

    1. 去抖动

        去抖动是一种编程实践，它限制函数触发的频率。

        您可以通过几种方式实现去抖动，包括手动创建自己的去抖动函数。为了简单起见，我们将使用一个名为 use-debounce 库。

        pnpm i use-debounce
12. 表单数据
    1. 创建服务器操作

        通过添加 'use server' ，您可以将文件中的所有导出函数标记为服务器操作。

        向 <form> 元素添加 action 属性，并调用 createInvoice 操作。
    
        从 formData 中提取数据，通过 get 方法。

    2. 验证表单数据

        为了方便您使用，我们将使用 Zod ，一个 TypeScript 优先的验证库，可以为您简化此任务。

        import { z } from 'zod';
 
        const FormSchema = z.object({
            id: z.string(),
            customerId: z.string(),
            amount: z.coerce.number(),
            status: z.enum(['pending', 'paid']),
            date: z.string(),
        });
        
        const CreateInvoice = FormSchema.omit({ id: true, date: true });

        const { customerId, amount, status } = CreateInvoice.parse({
            customerId: formData.get('customerId'),
            amount: formData.get('amount'),
            status: formData.get('status'),
        });

    3. 重新验证和重定向

        Next.js 有一个客户端路由器缓存，它会将路由段暂时存储在用户的浏览器中。除了预取功能外，此缓存还能确保用户能够在路由之间快速导航，同时减少对服务器的请求数量。

        由于您正在更新发票路由中显示的数据，因此您需要清除此缓存并触发对服务器的新请求。您可以使用 Next.js 中的 revalidatePath 函数来执行此操作：

    4. 动态路由段

        您可以通过将文件夹名称括在方括号中来创建动态路由段。例如， [id] 、 [post] 或 [slug] 。

        除了 searchParams 之外，页面组件还接受一个名为 params 的 prop，你可以使用它来访问 id 。更新你的 <Page> 组件以接收该 prop：

    5. 将 id 传递给服务器 Action

        export async function updateInvoice(id: string, formData: FormData) {}

        const updateInvoiceWithId = updateInvoice.bind(null, invoice.id);
 
        return <form action={updateInvoiceWithId}>{/* ... */}</form>;
13. 处理错误
    
    请注意， redirect 是在 try/catch 块之外调用的。这是因为 redirect 工作原理是抛出一个错误，而这个错误会被 catch 块捕获。为了避免这种情况，你可以在 try/catch 之后调用 redirect 。只有 try 成功后， redirect 才会被执行。

    1. 使用 error.tsx 处理所有错误

        https://nextjs.org/learn/dashboard-app/error-handling#handling-all-errors-with-errortsx

        'use client';
 
        import { useEffect } from 'react';
        
        export default function Error({
            error,
            reset,
        }: {
            error: Error & { digest?: string };
            reset: () => void;
        }) {
            useEffect(() => {
                // Optionally log the error to an error reporting service
                console.error(error);
            }, [error]);
            
            return (
                <main className="flex h-full flex-col items-center justify-center">
                <h2 className="text-center">Something went wrong!</h2>
                <button
                    className="mt-4 rounded-md bg-blue-500 px-4 py-2 text-sm text-white transition-colors hover:bg-blue-400"
                    onClick={
                    // Attempt to recover by trying to re-render the invoices route
                    () => reset()
                    }
                >
                    Try again
                </button>
                </main>
            );
        }

        1. 'use client' 表示一个客户端组件。
        2. error ：此对象是 JavaScript 原生 Error 的一个实例对象。
        3. reset ：这是一个重置错误边界的函数。执行该函数时，将尝试重新渲染该路由段。

    2. 使用 notFound 函数处理 404 错误

        优雅地处理错误的另一种方法是使用 notFound 函数 error.tsx 可用于捕获未捕获的异常，而 notFound 则可用于尝试获取不存在的资源。

        import { notFound } from 'next/navigation';

        if (!invoice) {
            notFound();
        }

        在 page.tsx 同文件夹目录下创建 not-found.tsx。

        需要记住的是， notFound 将优先于 error.tsx ，因此当您想要处理更具体的错误时，您可以使用它！
14. 无障碍设施
    1. 可访问性

        无障碍是指设计和实现人人（包括残障人士）均可使用的 Web 应用程序。它是一个涵盖诸多领域的广泛主题，例如键盘导航、语义 HTML、图像、颜色、视频等等。

    2. 在 Next.js 中使用 ESLint 辅助功能插件

        Next.js 包含 eslint-plugin-jsx-a11y 插件在其 ESLint 配置中，可帮助及早发现可访问性问题。例如，如果您的图片没有 alt 文本、 aria-* 和 role 属性使用不当等，此插件会发出警告。

        或者，如果您想尝试一下，请在 package.json 文件中添加 next lint 作为脚本：

        "scripts": {
            "build": "next build",
            "dev": "next dev",
            "start": "next start",
            "lint": "next lint"
        },

        pnpm lint

    3. 提高表单可访问性

        1. 语义化 HTML ：使用语义元素（ <input> 、 <option> 等）替代 <div> 。这使得辅助技术 (AT) 能够专注于输入元素，并向用户提供合适的上下文信息，使表单更易于浏览和理解。
        2. 标签 ：包含 <label> 和 htmlFor 属性可确保每个表单字段都具有描述性文本标签。这不仅通过提供上下文增强了 AT 支持，还允许用户点击标签以将焦点集中在相应的输入字段上，从而提高了可用性。
        3. 焦点轮廓 ：字段的样式经过适当设计，在获得焦点时会显示轮廓。这对于可访问性至关重要，因为它可以直观地指示页面上的活动元素，帮助键盘和屏幕阅读器用户了解他们在表单上的位置。您可以通过按 tab 来验证这一点。

    4. 表单验证

        1. 客户端验证

            您可以通过多种方式在客户端验证表单。最简单的方法是依赖浏览器提供的表单验证功能，方法是将 required 属性添加到表单中的 <input> 和 <select> 元素。

        2. 服务端验证

            'use client';
 
            // ...
            import { useActionState } from 'react';

            const initialState: State = { message: null, errors: {} };
            const [state, formAction] = useActionState(createInvoice, initialState);

            export async function createInvoice(prevState: State, formData: FormData) {}

            useActionState 钩子：

                接受两个参数： (action, initialState) 。

                返回两个值： [state, formAction] - 表单状态，以及提交表单时要调用的函数。
                
                将您的 createInvoice 操作作为 useActionState 的参数传递，并在 <form action={}> 属性内调用 formAction 。

                initialState 可以是任何你定义的值。

            1. 将当前页面 tsx 声明为客户端组件
            2. 从 react 导入 useActionState 钩子
            3. 使用 useActionState 包装处理函数，并传入校验失败返回对象
            4. 替换表单处理方法为 formAction
            5. 引用 state 显示错误信息
15. 添加身份验证
    1. 安装 NextAuth.js

        1. 安装：pnpm i next-auth@beta
        2. 生成秘钥：openssl rand -base64 32
        3. 在 .env 配置文件中配置秘钥变量 AUTH_SECRET=your-secret-key
        4. 生产环境 vercel 配置环境变量，参考：https://vercel.com/docs/environment-variables

    2. 设置 NextAuth.js

        在项目根目录创建一个 auth.config.ts 文件，导出一个 authConfig 对象。

        import type { NextAuthConfig } from 'next-auth';
 
        export const authConfig = {
            pages: {
                signIn: '/login',
            },
            callbacks: {
                authorized({ auth, request: { nextUrl } }) {
                const isLoggedIn = !!auth?.user;
                const isOnDashboard = nextUrl.pathname.startsWith('/dashboard');
                if (isOnDashboard) {
                    if (isLoggedIn) return true;
                    return false; // Redirect unauthenticated users to login page
                } else if (isLoggedIn) {
                    return Response.redirect(new URL('/dashboard', nextUrl));
                }
                return true;
                },
            },
            providers: [], // Add providers with an empty array for now
        } satisfies NextAuthConfig;

        您可以使用 pages 选项指定自定义登录、退出和错误页面的路由。这不是必需的，但是通过在 pages 选项中添加 signIn: '/login' ，用户将被重定向到我们的自定义登录页面，而不是 NextAuth.js 的默认页面。

        authorized 回调用于验证请求是否有权使用 Next.js 中间件访问页面。它在请求完成之前调用，并接收一个包含 auth 和 request 属性的对象。 auth 属性包含用户的会话， request 属性包含传入的请求。

    3. 启用 NextAuth.js

        1. 在项目的根目录中，创建一个名为 middleware.ts 的文件并粘贴以下代码：

            import NextAuth from 'next-auth';
            import { authConfig } from './auth.config';
            
            export default NextAuth(authConfig).auth;
            
            export const config = {
                // https://nextjs.org/docs/app/building-your-application/routing/middleware#matcher
                matcher: ['/((?!api|_next/static|_next/image|.*\\.png$).*)'],
            };

            这里，你使用 authConfig 对象初始化 NextAuth.js，并导出 auth 属性。你还使用了中间件中的 matcher 选项来指定它应该在特定路径上运行。

        2. 密码哈希

            在将密码存储到数据库之前，最好先对其进行哈希处理。在为数据库做种时，你使用了一个名为 bcrypt 的包来对用户密码进行哈希处理，然后再将其存储到数据库中。

            但是，你需要为 bcrypt 包创建一个单独的文件。这是因为 bcrypt 依赖的是 Next.js 中间件所不具备的 Node.js API。

        3. 创建一个名为 auth.ts 的新文件来传播您的 authConfig 对象：

            import NextAuth from 'next-auth';
            import Credentials from 'next-auth/providers/credentials';
            import { authConfig } from './auth.config';
            import { z } from 'zod';
            import type { User } from '@/app/lib/definitions';
            import bcrypt from 'bcrypt';
            import postgres from 'postgres';
            
            const sql = postgres(process.env.POSTGRES_URL!, { ssl: 'require' });
            
            async function getUser(email: string): Promise<User | undefined> {
            try {
                const user = await sql<User[]>`SELECT * FROM users WHERE email=${email}`;
                return user[0];
            } catch (error) {
                console.error('Failed to fetch user:', error);
                throw new Error('Failed to fetch user.');
            }
            }
            
            export const { auth, signIn, signOut } = NextAuth({
                ...authConfig,
                providers: [
                    Credentials({
                    async authorize(credentials) {
                        const parsedCredentials = z
                        .object({ email: z.string().email(), password: z.string().min(6) })
                        .safeParse(credentials);
                
                        if (parsedCredentials.success) {
                        const { email, password } = parsedCredentials.data;
                        const user = await getUser(email);
                        if (!user) return null;

                        const passwordsMatch = await bcrypt.compare(password, user.password);
                        if (passwordsMatch) return user;
                        }
                
                        return null;
                    },
                    }),
                ],
            });

            Providers 是一个数组，用于列出不同的登录选项，例如 Google 或 GitHub。在本课程中，我们将重点介绍如何使用 Credentials 提供程序。 仅有的。

            其它登录方式参考：https://authjs.dev/getting-started/providers/credentials-tutorial
16. 添加元数据

    元数据对于 SEO 和可共享性至关重要。

    1. 添加元数据

        1. 基于配置 ：在 layout.js 或 page.js 文件中导出静态元 metadata 对象或动态 generateMetadata 函数 。
        2. 基于文件 ：Next.js 有一系列专门用于元数据目的的特殊文件：

            favicon.ico 、 apple-icon.jpg 和 icon.jpg ：用于网站图标和图标
            opengraph-image.jpg 和 twitter-image.jpg ：用于社交媒体图像
            robots.txt ：提供搜索引擎抓取的指令
            sitemap.xml ：提供有关网站结构的信息

        通过这两个选项，Next.js 将自动为您的页面生成相关的 <head> 元素。

        在您的 /public 文件夹中，您会注意到有两个图像： favicon.ico 和 opengraph-image.jpg 。

        将这些图像移动到 /app 文件夹的根目录。

    2. 基于配置

        /app/layout.tsx

        import { Metadata } from 'next';
 
        export const metadata: Metadata = {
            title: 'Acme Dashboard',
            description: 'The official Next.js Course Dashboard, built with App Router.',
            metadataBase: new URL('https://next-learn-dashboard.vercel.sh'),
        };

    3. 标题模板

        /app/layout.tsx

        import { Metadata } from 'next';
 
        export const metadata: Metadata = {
            title: {
                template: '%s | Acme Dashboard',
                default: 'Acme Dashboard',
            },
            description: 'The official Next.js Learn Dashboard built with App Router.',
            metadataBase: new URL('https://next-learn-dashboard.vercel.sh'),
        };

        模板中的 %s 将被替换为特定的页面标题。

        在对应的页面中，添加标题，以替换模板。

        export const metadata: Metadata = {
            title: 'Invoices',
        };
